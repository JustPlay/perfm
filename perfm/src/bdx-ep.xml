<?xml version="1.0"?>
<root>
	<metric name="metric_CPU operating frequency (in GHz)">
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
		<event alias="b">CPU_CLK_UNHALTED.REF_TSC</event>
		<constant alias="c">system.tsc_freq</constant>      
		<formula>(a/b*c)/1000000000</formula>
	</metric>

	<metric name="metric_CPU utilization %">
		<event alias="a">CPU_CLK_UNHALTED.REF_TSC</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>

	<metric name="metric_CPU utilization% in kernel mode">
		<event alias="a">CPU_CLK_UNHALTED.REF_TSC:SUP</event>
		<event alias="b">TSC</event>
		<formula>100*a/b</formula>
	</metric>

    <metric name="metric_CPI">
        <throughput-metric-name>metric_cycles per txn</throughput-metric-name>
        <event alias="a">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="b">INST_RETIRED.ANY</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_kernel_CPI">
        <event alias="a">CPU_CLK_UNHALTED.THREAD:SUP</event>
        <event alias="b">INST_RETIRED.ANY:SUP</event>
        <formula>a/b</formula>
    </metric>
	
   <metric name="metric_EMON event mux reliability% (>95% good)">
        <event alias="a">CPU_CLK_UNHALTED.THREAD_P</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(((a-b)&lt;0)?(a/b):(b/a))</formula>
    </metric>

	<metric name="metric_% cycles uops retired">
        <event alias="a">UOPS_RETIRED.ALL:c1</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*a/b</formula>
    </metric>
	
	<metric name="metric_branch mispredict ratio">
		<event alias="a">BR_MISP_RETIRED.ALL_BRANCHES</event>
		<event alias="b">BR_INST_RETIRED.ALL_BRANCHES</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_loads per instr">
        <throughput-metric-name>metric_loads per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.ALL_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_stores per instr">
        <throughput-metric-name>metric_stores per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.ALL_STORES</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_locks retired per instr">
        <throughput-metric-name>metric_locks retired per txn</throughput-metric-name>
		<event alias="a">MEM_UOPS_RETIRED.LOCK_LOADS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_uncacheable reads per instr">
        <throughput-metric-name>metric_uncacheable reads per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x187</event>
		<event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x187:tid=0x3e</event>
		<event alias="c">INST_RETIRED.ANY</event>
		<formula>(a-b)/c</formula>
	</metric>	

	<metric name="metric_streaming stores (full line) per instr">
        <throughput-metric-name>metric_streaming stores (full line) per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.OPCODE:opc=0x18c</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	

	<metric name="metric_streaming stores (partial line) per instr">
        <throughput-metric-name>metric_streaming stores (partial line) per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.OPCODE:opc=0x18d</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>	


	<metric name="metric_L1D MPI (includes data+rfo w/ prefetches)">
        <throughput-metric-name>metric_L1D misses per txn (includes data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">L1D.REPLACEMENT</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L1D demand data read hits per instr">
        <throughput-metric-name>metric_L1D demand data read hits per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.L1_HIT</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L1-I code read misses (w/ prefetches) per instr">
        <throughput-metric-name>metric_L1I code read misses (includes prefetches) per txn</throughput-metric-name>
		<event alias="a">L2_RQSTS.ALL_CODE_RD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 demand data read hits per instr">
        <throughput-metric-name>metric_L2 demand data read hits per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.L2_HIT</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_L2 MPI (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_L2 misses per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">L2_LINES_IN.ALL</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
	
 	<metric name="metric_L2 demand data read MPI">
        <throughput-metric-name>metric_L2 demand data read misses per txn</throughput-metric-name>
		<event alias="a">MEM_LOAD_UOPS_RETIRED.L2_MISS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
	
	<metric name="metric_L2 demand code MPI">
        <throughput-metric-name>metric_L2 demand code misses per txn</throughput-metric-name>
		<event alias="a">L2_RQSTS.CODE_RD_MISS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
	
	<metric name="metric_L2 demand+L2 prefetch code MPI">
        <throughput-metric-name>metric_L2 demand+L2 prefetch code misses per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.OPCODE:opc=0x181</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

<!-- Broken event on Broadwell
	<metric name="metric_L2 Any local request that HITM in a sibling core (per instr)">
        <throughput-metric-name>metric_L2 Any local request that HITM in a sibling core per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_HIT.HITM_OTHER_CORE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
-->

	<metric name="metric_L2 Any local request that HITM in a sibling core (per instr)">
        <throughput-metric-name>metric_L2 Any local request that HITM in a sibling core per txn</throughput-metric-name>
		<event alias="a">CORE_SNOOP_RESPONSE.RSPSFWDM_ANY</event>
		<event alias="b">CORE_SNOOP_RESPONSE.RSPIFWDM_ANY</event>
		<event alias="c">INST_RETIRED.ANY</event>
		<!-- Constant below is 2 if HT on and 1 if HT off. Both threads in HT will count the same and /2 is needed -->
    <constant alias="d">system.sockets[0].cpus.count/system.sockets[0].cores.count</constant>
		<formula>((a+b)/d)/c</formula>
	</metric>	

<!-- Broken event on Broadwell
	<metric name="metric_L2 Any local request that HIT in a sibling core and not forwarded(per instr)">
        <throughput-metric-name>metric_L2 Any local request that HIT in a sibling core and not forwarded per txn</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_HIT.HIT_OTHER_CORE_NO_FWD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
-->
	<metric name="metric_L2 Any local request that HIT in a sibling core and not forwarded(per instr)">
        <throughput-metric-name>metric_L2 Any local request that HIT in a sibling core and not forwarded per txn</throughput-metric-name>
		<event alias="a">CORE_SNOOP_RESPONSE.RSPSHITFSE_ANY</event>
		<event alias="b">CORE_SNOOP_RESPONSE.RSPIHITFSE_ANY</event>
		<event alias="c">INST_RETIRED.ANY</event>
		<!-- Constant below is 2 if HT on and 1 if HT off. Both threads in HT will count the same and /2 is needed -->
    <constant alias="d">system.sockets[0].cpus.count/system.sockets[0].cores.count</constant>
		<formula>((a+b)/d)/c</formula>
	</metric>

<!-- Broken event on Broadwell
	<metric name="metric_L2 read miss latency (in core clocks) - valid only when SMT off">
		<event alias="a">OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD</event>
		<event alias="b">OFFCORE_REQUESTS.DEMAND_DATA_RD</event>
		<formula>a/b</formula>
	</metric>
-->
	<metric name="metric_LLC MPI (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_LLC misses per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">UNC_C_LLC_LOOKUP.ANY:state=0x1</event>
    <event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x1c8:tid=0x3e</event>
    <event alias="c">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x19e</event>
		<event alias="d">INST_RETIRED.ANY</event>
		<formula>(a-b-c)/d</formula>
	</metric>
	
<!--
	<metric name="metric_LLC MPI (includes code+data+rfo w/ prefetches)">
        <throughput-metric-name>metric_LLC misses per txn (includes code+data+rfo w/ prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.ANY_RESPONSE</event>
		<event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x190</event>
		<event alias="c">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x191</event>
		<event alias="d">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x192</event>
		<event alias="e">INST_RETIRED.ANY</event>
		<formula>(a+b+c+d)/e</formula>
	</metric>

	<metric name="metric_LLC data read MPI (excludes LLC prefetches)">
        <throughput-metric-name>metric_LLC data read misses per txn (excludes LLC prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ALL_DATA_RD:response=LLC_MISS.ANY_RESPONSE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC code read MPI (excludes LLC prefetches)">
        <throughput-metric-name>metric_LLC code read misses per txn (excludes LLC prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ALL_CODE_RD:response=LLC_MISS.ANY_RESPONSE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC RFO MPI (excludes LLC prefetches)">
        <throughput-metric-name>metric_LLC RFO misses per txn (excludes LLC prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ALL_RFO:response=LLC_MISS.ANY_RESPONSE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
-->
	<metric name="metric_LLC LLC prefetch data read MPI">
        <throughput-metric-name>metric_LLC LLC data prefetch read misses per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x192</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC LLC prefetch RFO read MPI">
        <throughput-metric-name>metric_LLC LLC RFO prefetch read misses per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x190</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_LLC LLC prefetch code read MPI">
        <throughput-metric-name>metric_LLC LLC code prefetch read misses per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x191</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

<!-- Broken event on Broadwell
	<metric name="metric_LLC total HITM (per instr) (excludes LLC prefetches)">
        <throughput-metric-name>metric_LLC total HITM per txn (excludes LLC prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.REMOTE_HITM</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
-->
	<metric name="metric_LLC total HITM (per instr) (excludes LLC prefetches)">
        <throughput-metric-name>metric_LLC total HITM per txn (excludes LLC prefetches)</throughput-metric-name>
		<event alias="a">UNC_H_SNOOP_RESP.RSPIFWD</event>
		<event alias="b">UNC_H_SNOOP_RESP.RSP_FWD_WB</event>
		<event alias="c">INST_RETIRED.ANY</event>
		<formula>(a+b)/c</formula>
	</metric>

<!-- Broken event on Broadwell
	<metric name="metric_LLC total HIT clean line forwards (per instr) (excludes LLC prefetches)">
        <throughput-metric-name>metric_LLC total HIT clean line forwards per txn (excludes LLC prefetches)</throughput-metric-name>
		<event alias="a">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.REMOTE_HIT_FORWARD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
-->
	<metric name="metric_LLC total HIT clean line forwards (per instr) (excludes LLC prefetches)">
        <throughput-metric-name>metric_LLC total HIT clean line forwards per txn (excludes LLC prefetches)</throughput-metric-name>
		<event alias="a">UNC_H_SNOOP_RESP.RSPSFWD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

    <metric name="metric_LLC writebacks per instr">
        <throughput-metric-name>metric_LLC writebacks per txn</throughput-metric-name>
        <event alias="a">UNC_C_LLC_VICTIMS.M_STATE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_Average LLC data read (demand+prefetch) miss latency (in ns)">
        <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_OPCODE:opc=0x182</event>
        <event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x182</event>
        <event alias="c">UNC_C_CLOCKTICKS</event>
       <constant alias="d">system.sockets[0].cores.count</constant>
        <constant alias="e">system.sockets.count</constant>
         <formula>1000000000*(a/b)/(c/(d*e))</formula>
    </metric>


    <metric name="metric_Average LLC data read (demand+prefetch) miss latency (in UNCORE clk)">
        <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_OPCODE:opc=0x182</event>
        <event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x182</event>
        <formula>a/b</formula>
    </metric>

    <metric name="metric_Average LLC data read (demand+prefetch) miss latency for LOCAL requests (in ns)">
        <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_LOCAL_OPCODE:opc=0x182</event>
        <event alias="b">UNC_C_TOR_INSERTS.MISS_LOCAL_OPCODE:opc=0x182</event>
        <event alias="c">UNC_C_CLOCKTICKS</event>
       <constant alias="d">system.sockets[0].cores.count</constant>
        <constant alias="e">system.sockets.count</constant>
         <formula>1000000000*(a/b)/(c/(d*e))</formula>
    </metric>

   <metric name="metric_Average LLC data read (demand+prefetch) miss latency for REMOTE requests (in ns)">
        <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_REMOTE_OPCODE:opc=0x182</event>
        <event alias="b">UNC_C_TOR_INSERTS.MISS_REMOTE_OPCODE:opc=0x182</event>
        <event alias="c">UNC_C_CLOCKTICKS</event>
       <constant alias="d">system.sockets[0].cores.count</constant>
        <constant alias="e">system.sockets.count</constant>
         <formula>1000000000*(a/b)/(c/(d*e))</formula>
    </metric>

        <metric name="metric_Average LLC data read (demand+prefetch) miss latency  for LOCAL requests (in UNCORE clk)">
                <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_LOCAL_OPCODE:opc=0x182</event>
                <event alias="b">UNC_C_TOR_INSERTS.MISS_LOCAL_OPCODE:opc=0x182</event>
                <formula>a/b</formula>
        </metric>

        <metric name="metric_Average LLC data read (demand+prefetch) miss latency  for REMOTE requests (in UNCORE clk)">
                <event alias="a">UNC_C_TOR_OCCUPANCY.MISS_REMOTE_OPCODE:opc=0x182</event>
                <event alias="b">UNC_C_TOR_INSERTS.MISS_REMOTE_OPCODE:opc=0x182</event>
                <formula>a/b</formula>
        </metric>

 
	<metric name="metric_ITLB MPI">
        <throughput-metric-name>metric_ITLB misses per txn</throughput-metric-name>
		<event alias="a">ITLB_MISSES.WALK_COMPLETED</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_ITLB large page MPI">
        <throughput-metric-name>metric_ITLB large page misses per txn</throughput-metric-name>
		<event alias="a">ITLB_MISSES.WALK_COMPLETED_2M_4M</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB load MPI">
        <throughput-metric-name>metric_DTLB load misses per txn</throughput-metric-name>
		<event alias="a">DTLB_LOAD_MISSES.WALK_COMPLETED</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB large page load MPI">
        <throughput-metric-name>metric_DTLB large page load misses per txn</throughput-metric-name>
		<event alias="a">DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB store MPI">
        <throughput-metric-name>metric_DTLB store misses per txn</throughput-metric-name>
		<event alias="a">DTLB_STORE_MISSES.WALK_COMPLETED</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB load miss latency (in core clks)">
		<event alias="a">DTLB_LOAD_MISSES.WALK_DURATION</event>
		<event alias="b">DTLB_LOAD_MISSES.WALK_COMPLETED</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_DTLB store miss latency (in core clks)">
		<event alias="a">DTLB_STORE_MISSES.WALK_DURATION</event>
		<event alias="b">DTLB_STORE_MISSES.WALK_COMPLETED</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_ITLB miss latency (in core clks)">
		<event alias="a">ITLB_MISSES.WALK_DURATION:c1</event>
		<event alias="b">ITLB_MISSES.WALK_COMPLETED</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_% of DTLB page walks that hit in L1">
		<event alias="a">PAGE_WALKER_LOADS.DTLB_L1</event>
		<event alias="b">PAGE_WALKER_LOADS.DTLB_L2</event>
		<event alias="c">PAGE_WALKER_LOADS.DTLB_L3</event>
		<event alias="d">PAGE_WALKER_LOADS.DTLB_MEMORY</event>
		<formula>100*a/(a+b+c+d)</formula>
	</metric>
	
	<metric name="metric_% of DTLB page walks that hit in L2">
		<event alias="a">PAGE_WALKER_LOADS.DTLB_L1</event>
		<event alias="b">PAGE_WALKER_LOADS.DTLB_L2</event>
		<event alias="c">PAGE_WALKER_LOADS.DTLB_L3</event>
		<event alias="d">PAGE_WALKER_LOADS.DTLB_MEMORY</event>
		<formula>100*b/(a+b+c+d)</formula>
	</metric>
	
	<metric name="metric_% of DTLB page walks that hit in L3">
		<event alias="a">PAGE_WALKER_LOADS.DTLB_L1</event>
		<event alias="b">PAGE_WALKER_LOADS.DTLB_L2</event>
		<event alias="c">PAGE_WALKER_LOADS.DTLB_L3</event>
		<event alias="d">PAGE_WALKER_LOADS.DTLB_MEMORY</event>
		<formula>100*c/(a+b+c+d)</formula>
	</metric>
	
	<metric name="metric_% of DTLB page walks that hit in memory">
		<event alias="a">PAGE_WALKER_LOADS.DTLB_L1</event>
		<event alias="b">PAGE_WALKER_LOADS.DTLB_L2</event>
		<event alias="c">PAGE_WALKER_LOADS.DTLB_L3</event>
		<event alias="d">PAGE_WALKER_LOADS.DTLB_MEMORY</event>
		<formula>100*d/(a+b+c+d)</formula>
	</metric>
	
	<metric name="metric_% of ITLB page walks that hit in L1">
		<event alias="a">PAGE_WALKER_LOADS.ITLB_L1</event>
		<event alias="b">PAGE_WALKER_LOADS.ITLB_L2</event>
		<event alias="c">PAGE_WALKER_LOADS.ITLB_L3</event>
		<event alias="d">PAGE_WALKER_LOADS.ITLB_MEMORY</event>
		<formula>100*a/(a+b+c+d)</formula>
	</metric>
	
	<metric name="metric_% of ITLB page walks that hit in L2">
		<event alias="a">PAGE_WALKER_LOADS.ITLB_L1</event>
		<event alias="b">PAGE_WALKER_LOADS.ITLB_L2</event>
		<event alias="c">PAGE_WALKER_LOADS.ITLB_L3</event>
		<event alias="d">PAGE_WALKER_LOADS.ITLB_MEMORY</event>
		<formula>100*b/(a+b+c+d)</formula>
	</metric>
	
	<metric name="metric_% of ITLB page walks that hit in L3">
		<event alias="a">PAGE_WALKER_LOADS.ITLB_L1</event>
		<event alias="b">PAGE_WALKER_LOADS.ITLB_L2</event>
		<event alias="c">PAGE_WALKER_LOADS.ITLB_L3</event>
		<event alias="d">PAGE_WALKER_LOADS.ITLB_MEMORY</event>
		<formula>100*c/(a+b+c+d)</formula>
	</metric>
	
	<metric name="metric_% of ITLB page walks that hit in memory">
		<event alias="a">PAGE_WALKER_LOADS.ITLB_L1</event>
		<event alias="b">PAGE_WALKER_LOADS.ITLB_L2</event>
		<event alias="c">PAGE_WALKER_LOADS.ITLB_L3</event>
		<event alias="d">PAGE_WALKER_LOADS.ITLB_MEMORY</event>
		<formula>100*d/(a+b+c+d)</formula>
	</metric>

	<metric name="metric_NUMA %_Reads addressed to local DRAM">
		<event alias="a">UNC_H_REQUESTS.READS_LOCAL</event>
		<event alias="b">UNC_H_REQUESTS.READS</event>
		<formula>100*a/b</formula>
	</metric>

	<metric name="metric_NUMA %_Reads addressed to remote DRAM">
		<event alias="a">UNC_H_REQUESTS.READS_LOCAL</event>
		<event alias="b">UNC_H_REQUESTS.READS</event>
		<formula>100*(b-a)/b</formula>
	</metric>
	
<!--	<metric name="metric_NUMA %_Reads satisfied by local DRAM (LLC prefetches excluded)">
		<event alias="a">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.LOCAL_DRAM</event>
		<event alias="b">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.ANY_RESPONSE</event>
		<formula>100*(a/b)</formula>
	</metric>

	<metric name="metric_NUMA %_Reads satisfied by remote DRAM (LLC prefetches excluded)">
		<event alias="a">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.LOCAL_DRAM</event>
		<event alias="b">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.REMOTE_HITM</event>
		<event alias="c">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.REMOTE_HIT_FORWARD</event>
		<event alias="d">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.ANY_RESPONSE</event>
		<formula>100*(d-a-b-c)/d</formula>
	</metric>

	<metric name="metric_NUMA %_Reads satisfied by remote caches (Hitm+HitF; LLC prefetches excluded)">
		<event alias="a">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.REMOTE_HITM</event>
		<event alias="b">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.REMOTE_HIT_FORWARD</event>
		<event alias="c">OFFCORE_RESPONSE:request=ALL_READS:response=LLC_MISS.ANY_RESPONSE</event>
		<formula>100*(a+b)/c</formula>
	</metric>
-->
    <metric name="metric_uncore frequency GHz">
        <event alias="a">UNC_C_CLOCKTICKS</event>
        <constant alias="b">system.sockets[0].cores.count</constant>
        <constant alias="c">system.sockets[1].cores.count</constant>
        <formula>a/(b+c)/1000000000</formula>
        <formula socket="0">a[0]/b/1000000000</formula>
        <formula socket="1">a[1]/c/1000000000</formula>
    </metric>

    <metric name="metric_QPI speed - GT/s">
        <event alias="a">UNC_Q_CLOCKTICKS</event>
        <formula>a/8*8/1000000000</formula>
        <formula socket="0">a[0]/4*8/1000000000</formula>
        <formula socket="1">a[1]/4*8/1000000000</formula>
    </metric>

    <metric name="metric_QPI Data transmit BW (MB/sec) (only data)">
        <event alias="a">UNC_Q_TxL_FLITS_G0.DATA</event>
        <formula>a*8/1000000</formula>
    </metric>

    <metric name="metric_QPI total transmit BW (MB/sec) (includes control)">
        <event alias="a">UNC_Q_TxL_FLITS_G0.DATA</event>
        <event alias="b">UNC_Q_TxL_FLITS_G0.NON_DATA</event>
        <formula>(a+b)*8/1000000</formula>
    </metric>

    <metric name="metric_QPI Transmit utilization_% (includes control)">
        <event alias="a">UNC_Q_CLOCKTICKS</event>
        <event alias="b">UNC_Q_TxL_FLITS_G0.DATA</event>
        <event alias="c">UNC_Q_TxL_FLITS_G0.NON_DATA</event>
        <formula>100*(b+c)/a</formula>
    </metric>

    <metric name="metric_HA - Reads vs. all requests">
      <event alias="a">UNC_H_REQUESTS.READS</event>
      <event alias="b">UNC_H_REQUESTS.WRITES</event>
      <formula>a/(a+b)</formula>
    </metric>

    <metric name="metric_HA - Writes vs. all requests">
      <event alias="a">UNC_H_REQUESTS.READS</event>
      <event alias="b">UNC_H_REQUESTS.WRITES</event>
      <formula>b/(a+b)</formula>
    </metric>

    <metric name="metric_HA % of all reads that are local">
      <event alias="a">UNC_H_REQUESTS.READS_LOCAL</event>
      <event alias="b">UNC_H_REQUESTS.READS</event>
      <formula>100*a/b</formula>
    </metric>

    <metric name="metric_HA % of all writes that are local">
      <event alias="a">UNC_H_REQUESTS.WRITES_LOCAL</event>
      <event alias="b">UNC_H_REQUESTS.WRITES</event>
      <formula>100*a/b</formula>
    </metric>

    <metric name="metric_HA HitM transfers per instr">
        <throughput-metric-name>metric_HA HitM transfers per txn</throughput-metric-name>
      <event alias="a">UNC_H_SNOOP_RESP.RSP_FWD_WB</event>
      <event alias="b">UNC_H_SNOOP_RESP.RSPIFWD</event>
		<event alias="c">INST_RETIRED.ANY</event>
		<formula>(a+b)/c</formula>
    </metric>

    <metric name="metric_HA Hit transfers per instr">
        <throughput-metric-name>metric_HA Hit transfers per txn</throughput-metric-name>
      <event alias="a">UNC_H_SNOOP_RESP.RSPSFWD</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA conflict responses per instr">
        <throughput-metric-name>metric_HA conflict responses per txn</throughput-metric-name>
      <event alias="a">UNC_H_SNOOP_RESP.RSPCNFLCT</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA directory lookups that spawned a snoop (per instr)">
        <throughput-metric-name>metric_HA directory lookups that spawned a snoop (per txn)</throughput-metric-name>
      <event alias="a">UNC_H_DIRECTORY_LOOKUP.SNP</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA directory lookups that did not spawn a snoop (per instr)">
        <throughput-metric-name>metric_HA directory lookups that did not spawn a snoop (per txn)</throughput-metric-name>
      <event alias="a">UNC_H_DIRECTORY_LOOKUP.NO_SNP</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA directory updates to A or S state (per instr)">
        <throughput-metric-name>metric_HA directory updates to A or S state (per txn)</throughput-metric-name>
      <event alias="a">UNC_H_DIRECTORY_UPDATE.SET</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA directory updates to I state (per instr)">
        <throughput-metric-name>metric_HA directory updates to I state (per txn)</throughput-metric-name>
      <event alias="a">UNC_H_DIRECTORY_UPDATE.CLEAR</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>
    
    <metric name="metric_HA_HitME_cache_Lookup_allocations_RspFwdI_RspFwdS_per_instr">
        <throughput-metric-name>metric_HA_HitME_cache_Lookup_allocations_RspFwdI_RspFwdS_per_txn</throughput-metric-name>
      <event alias="a">UNC_H_HITME_LOOKUP.ALLOCS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA_HitME_cache_Hits_RspFwdI_RspFwdS_per_instr">
        <throughput-metric-name>metric_HA_HitME_cache_Hits_RspFwdI_RspFwdS_per_txn</throughput-metric-name>
      <event alias="a">UNC_H_HITME_HIT.ALLOCS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA_HitME_cache_% hit_rate">
      <event alias="a">UNC_H_HITME_HIT.READ_OR_INVITOE</event>
      <event alias="b">UNC_H_HITME_LOOKUP.ALLOCS</event> 
      <event alias="c">UNC_H_HITME_HIT.INVALS</event> 
      <formula>100*a/(b-c)</formula>
    </metric>

    <metric name="metric_HA_HitME_cache_lookup_RspFwdI_local per instr">
        <throughput-metric-name>metric_HA_HitME_cache_lookup_RspFwdI_local per txn</throughput-metric-name>
      <event alias="a">UNC_H_HITME_LOOKUP.RSPFWDI_LOCAL</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA_HitME_cache_lookup_RspFwdI_remote per instr">
        <throughput-metric-name>metric_HA_HitME_cache_lookup_RspFwdI_remote per txn</throughput-metric-name>
      <event alias="a">UNC_H_HITME_LOOKUP.RSPFWDI_REMOTE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA_HitME_cache_lookup_RspFwdS per instr">
        <throughput-metric-name>metric_HA_HitME_cache_lookup_RspFwdS per txn</throughput-metric-name>
      <event alias="a">UNC_H_HITME_LOOKUP.RSPFWDS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA_HitME_cache_lookup_any_Rsp per instr">
        <throughput-metric-name>metric_HA_HitME_cache_lookup_any_Rsp per txn</throughput-metric-name>
      <event alias="a">UNC_H_HITME_LOOKUP.RSP</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <metric name="metric_HA_HitME_cache_hit_invalidates per instr">
        <throughput-metric-name>metric_HA_HitME_cache_hit_invalidates per txn</throughput-metric-name>
      <event alias="a">UNC_H_HITME_HIT.INVALS</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
    </metric>

    <!-- Assumed 4 memory channels populated in each socket -->
    <!--
        <metric name="metric_DDR data rate (MT/sec)">
            <event alias="a">UNC_M_CLOCKTICKS</event>
            <constant alias="b"> system.sockets.count </constant>
            <formula>2*a/(b*4)/1000000</formula>
            <formula socket="0">2*a[0]/4/1000000</formula>
            <formula socket="1">2*a[1]/4/1000000</formula>
        </metric>
    -->

    <!-- Assumed 2 memory channels populated in each socket -->
    <metric name="metric_DDR data rate (MT/sec)">
        <event alias="a">UNC_M_CLOCKTICKS</event>
        <constant alias="b"> system.sockets.count </constant>
        <formula>2*a/(b*2)/1000000</formula>
        <formula socket="0">2*a[0]/2/1000000</formula>
        <formula socket="1">2*a[1]/2/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth read (MB/sec)">
        <event alias="a">UNC_M_CAS_COUNT.RD</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth write (MB/sec)">
        <event alias="a">UNC_M_CAS_COUNT.WR</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_memory bandwidth total (MB/sec)">
        <event alias="a">UNC_M_CAS_COUNT.RD</event>
        <event alias="b">UNC_M_CAS_COUNT.WR</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_IO_bandwidth_disk_or_network_writes (MB/sec)">
        <event alias="a">UNC_C_TOR_INSERTS.OPCODE:opc=0x19e</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_IO_bandwidth_disk_or_network_reads (MB/sec)">
        <event alias="a">UNC_C_TOR_INSERTS.OPCODE:opc=0x1c8:tid=0x3e</event>
        <event alias="b">UNC_C_TOR_INSERTS.OPCODE:opc=0x180:tid=0x3e</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_IO_number of partial PCI writes per sec">
        <event alias="a">UNC_C_TOR_INSERTS.OPCODE:opc=0x180:tid=0x3e</event>
        <!-- +0 is added to work-around a bug -->
        <formula>a+0</formula>
    </metric>

    <metric name="metric_IO_write cache miss(disk/network reads) bandwidth (MB/sec)">
        <event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x1c8:tid=0x3e</event>
        <event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x180:tid=0x3e</event>
        <formula>(a+b)*64/1000000</formula>
    </metric>

    <metric name="metric_IO_read cache miss(disk/network writes) bandwidth (MB/sec)">
        <event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x19e</event>
        <formula>a*64/1000000</formula>
    </metric>

    <metric name="metric_IONUMA % disk/network reads addressed to local memory">
        <event alias="a">UNC_C_TOR_INSERTS.LOCAL_OPCODE:opc=0x1c8:tid=0x3e</event>
        <event alias="b">UNC_C_TOR_INSERTS.REMOTE_OPCODE:opc=0x1c8:tid=0x3e</event>
        <formula>100*a/(a+b)</formula>
    </metric>

    <metric name="metric_IONUMA % disk/network writes addressed to local memory">
        <event alias="a">UNC_C_TOR_INSERTS.LOCAL_OPCODE:opc=0x19e</event>
        <event alias="b">UNC_C_TOR_INSERTS.REMOTE_OPCODE:opc=0x19e</event>
        <formula>100*a/(a+b)</formula>
    </metric>

    <metric name="metric_MMIO reads per sec">
        <event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x187:nc=1</event>
        <formula>a+0</formula>
    </metric>

    <metric name="metric_MMIO writes per sec">
        <event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x18f:nc=1</event>
        <formula>a+0</formula>
    </metric>

    <metric name="metric_memory reads vs. all requests">
        <event alias="a">UNC_M_CAS_COUNT.RD</event>
        <event alias="b">UNC_M_CAS_COUNT.WR</event>
        <formula>a/(a+b)</formula>
    </metric>

    <metric name="metric_memory Page Empty vs. all requests">
        <event alias="a">UNC_M_PRE_COUNT.RD:u0xc</event>
        <event alias="c">UNC_M_PRE_COUNT.PAGE_MISS</event>
        <event alias="d">UNC_M_CAS_COUNT.RD</event>
        <event alias="e">UNC_M_CAS_COUNT.WR</event>
        <formula>(a-c)/(d+e)</formula>
    </metric>

    <metric name="metric_memory Page Misses vs. all requests">
        <event alias="b">UNC_M_PRE_COUNT.PAGE_MISS</event>
        <event alias="c">UNC_M_CAS_COUNT.RD</event>
        <event alias="d">UNC_M_CAS_COUNT.WR</event>
        <formula>b/(c+d)</formula>
    </metric>

    <metric name="metric_memory Page Hits vs. all requests">
        <event alias="a">UNC_M_PRE_COUNT.RD:u0xc</event>
        <event alias="c">UNC_M_CAS_COUNT.RD</event>
        <event alias="d">UNC_M_CAS_COUNT.WR</event>
        <formula>1-(a/(c+d))</formula>
    </metric>

    <metric name="metric_memory % Cycles where all DRAM ranks are in PPD mode">
        <event alias="a">UNC_M_POWER_CHANNEL_PPD</event>
        <event alias="b">UNC_M_CLOCKTICKS</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_memory % Cycles all ranks in critical thermal throttle">
        <event alias="a">UNC_M_POWER_CRITICAL_THROTTLE_CYCLES</event>
        <event alias="b">UNC_M_CLOCKTICKS</event>
        <formula>100*a/b</formula>
    </metric>

    <metric name="metric_memory % Cycles Memory is in self refresh power mode">
        <event alias="a">UNC_M_POWER_SELF_REFRESH</event>
        <event alias="b">UNC_M_CLOCKTICKS</event>
        <formula>100*a/b</formula>
    </metric>
	
    <metric name="metric_ItoM operations (fast strings) that reference LLC per instr">
        <throughput-metric-name>metric_ItoM operations (fast strings) that reference LLC per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.OPCODE:opc=0x1c8</event>
		<event alias="b">UNC_C_TOR_INSERTS.OPCODE:opc=0x1c8:tid=0x3e</event>
		<event alias="c">INST_RETIRED.ANY</event>
		<formula>(a-b)/c</formula>
	</metric>
		
	<metric name="metric_ItoM operations (fast strings) that miss LLC per instr">
        <throughput-metric-name>metric_ItoM operations (fast strings) that miss LLC per txn</throughput-metric-name>
		<event alias="a">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x1c8</event>
		<event alias="b">UNC_C_TOR_INSERTS.MISS_OPCODE:opc=0x1c8:tid=0x3e</event>
		<event alias="c">INST_RETIRED.ANY</event>
		<formula>(a-b)/c</formula>
	</metric>

    <metric name="metric_% Uops delivered from decoded Icache (DSB)">
        <event alias="a">IDQ.DSB_UOPS</event>
        <event alias="b">UOPS_ISSUED.ANY</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% Uops delivered from legacy decode pipeline (MITE)">
        <event alias="a">IDQ.MITE_UOPS</event>
        <event alias="b">UOPS_ISSUED.ANY</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% Uops delivered from microcode sequencer (MS)">
        <event alias="a">IDQ.MS_UOPS</event>
        <event alias="b">UOPS_ISSUED.ANY</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% Uops delivered from loop stream detector (LSD)">
        <event alias="a">LSD.UOPS</event>
        <event alias="b">UOPS_ISSUED.ANY</event>
        <formula>100*(a/b)</formula>
    </metric>

    <metric name="metric_% cycles spent in resource stalls">
        <event alias="a">RESOURCE_STALLS.ANY</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
        <formula>100*(a/b)</formula>
    </metric>

	<metric name="metric_FP scalar single-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP scalar single-precision FP instructions retired per txn</throughput-metric-name>
		<event alias="a">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_FP scalar double-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP scalar double-precision FP instructions retired per txn</throughput-metric-name>
		<event alias="a">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>

	<metric name="metric_FP 128-bit packed single-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 128-bit packed single-precision FP instructions retired per txn</throughput-metric-name>
		<event alias="a">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
		
	<metric name="metric_FP 128-bit packed double-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 128-bit packed double-precision FP instructions retired per txn</throughput-metric-name>
		<event alias="a">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
		
	<metric name="metric_FP 256-bit packed single-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 256-bit packed single-precision FP instructions retired per txn</throughput-metric-name>
		<event alias="a">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
		
	<metric name="metric_FP 256-bit packed double-precision FP instructions retired per instr">
        <throughput-metric-name>metric_FP 256-bit packed double-precision FP instructions retired per txn</throughput-metric-name>
		<event alias="a">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
		<event alias="b">INST_RETIRED.ANY</event>
		<formula>a/b</formula>
	</metric>
	
	<metric name="metric_DRAM power (watts)">
		<event alias="a">FREERUN_DRAM_ENERGY_STATUS</event>
		<formula>a*15.3/1000000</formula>
	</metric>

	<metric name="metric_package power (watts)">
		<event alias="a">FREERUN_PKG_ENERGY_STATUS</event>
		<formula>a*61/1000000</formula>
	</metric>

	<metric name="metric_TMAM_Info_CoreIPC">
        <event alias="a">INST_RETIRED.ANY</event>
		<event alias="b">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>(a/(b/threads))</formula>
	</metric>	
	
	<metric name="metric_TMAM_Info_Memory Level Parallelism">
		<event alias="a">L1D_PEND_MISS.PENDING</event>
		<event alias="b">L1D_PEND_MISS.PENDING_CYCLES:amt1</event>		
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>(a/(b/threads))</formula>
	</metric>	

	<metric name="metric_TMAM_Info_cycles_all_HT_threads_active(%)">
		<event alias="a">CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE</event>
		<event alias="b">CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(((threads)&lt;2)?0:(1-a/(b/2)))</formula>
	</metric>

	
	<metric name="metric_TMAM_Frontend_Bound(%)">
		<event alias="a">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<event alias="c">IDQ_UOPS_NOT_DELIVERED.CORE</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*c/(4*(a/threads))</formula>
	</metric>

	<metric name="metric_TMAM_..Frontend_Latency(%)">
		<event alias="a">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<event alias="c">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*c/(a/threads)</formula>
	</metric>
	
	<metric name="metric_TMAM_....ICache_Misses(%)">
		<event alias="a">ICACHE.IFDATA_STALL</event>
		<event alias="d">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*a/d</formula>
	</metric>

	<metric name="metric_TMAM_....ITLB_Misses(%)">
		<event alias="a">ITLB_MISSES.STLB_HIT</event>
		<event alias="b">ITLB_MISSES.WALK_DURATION:c1</event>
		<event alias="d">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*((7*a)+b)/d</formula>
	</metric>

	<metric name="metric_TMAM_....Branch_Resteers(%)">
        <event alias="a">MACHINE_CLEARS.COUNT</event>
        <event alias="b">BACLEARS.ANY</event>
        <event alias="c">RS_EVENTS.EMPTY_CYCLES</event>
        <event alias="d">ICACHE.IFDATA_STALL</event>
        <event alias="e">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="f">RS_EVENTS.EMPTY_END</event>
        <event alias="g">ITLB_MISSES.STLB_HIT</event>
		<event alias="h">ITLB_MISSES.WALK_DURATION:c1</event>
		<event alias="j">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*((c-d-(7*g+h))/f)*(e+a+b)/j</formula>
	</metric>

	<metric name="metric_TMAM_....DSB_Switches(%)">
		<event alias="a">DSB2MITE_SWITCHES.PENALTY_CYCLES</event>
		<event alias="d">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*a/d</formula>
	</metric>
	
	<metric name="metric_TMAM_....MS_Switches(%)">
		<event alias="a">IDQ.MS_SWITCHES</event>
		<event alias="d">CPU_CLK_UNHALTED.THREAD</event>
		<!-- 2 cycle is the MS switch cost -->
		<formula>100*2*a/d</formula>
	</metric>
	
	<metric name="metric_TMAM_..Frontend_Bandwidth(%)">
		<event alias="a">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<event alias="c">IDQ_UOPS_NOT_DELIVERED.CORE</event>
		<event alias="d">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>		
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(c-4*d)/(4*(a/threads))</formula>
	</metric>

    <metric name="metric_TMAM_Bad_Speculation(%)">
        <event alias="a">UOPS_ISSUED.ANY</event>
        <event alias="b">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="c">INT_MISC.RECOVERY_CYCLES_ANY</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
        <formula>100*(a-b+(4*c/threads))/(4*d/threads)</formula>
    </metric>

	<metric name="metric_TMAM_..Branch_Mispredicts(%)">
        <event alias="a">UOPS_ISSUED.ANY</event>
        <event alias="b">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="c">INT_MISC.RECOVERY_CYCLES_ANY</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD_ANY</event>
        <event alias="e">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="f">MACHINE_CLEARS.COUNT</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
        <formula>(e/(e+f))*100*(a-b+(4*c/threads))/(4*d/threads)</formula>
    </metric>

    <metric name="metric_TMAM_..Machine_Clears(%)">
        <event alias="a">UOPS_ISSUED.ANY</event>
        <event alias="b">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="c">INT_MISC.RECOVERY_CYCLES_ANY</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD_ANY</event>
        <event alias="e">BR_MISP_RETIRED.ALL_BRANCHES</event>
        <event alias="f">MACHINE_CLEARS.COUNT</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
        <formula>(f/(e+f))*100*(a-b+(4*c/threads))/(4*d/threads)</formula>
    </metric>

	<metric name="metric_TMAM_Backend_bound(%)">
		<event alias="a">IDQ_UOPS_NOT_DELIVERED.CORE</event>
		<event alias="b">UOPS_ISSUED.ANY</event>
		<event alias="c">INT_MISC.RECOVERY_CYCLES_ANY</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD_ANY</event>
        <event alias="e">UOPS_RETIRED.RETIRE_SLOTS</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100-(100*(b-e+4*(c/threads)+a+e)/(4*d/threads))</formula>
	</metric>

	<metric name="metric_TMAM_..Memory_Bound(%)">
		<event alias="a">IDQ_UOPS_NOT_DELIVERED.CORE</event>
		<event alias="b">UOPS_ISSUED.ANY</event>
		<event alias="c">INT_MISC.RECOVERY_CYCLES_ANY</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD_ANY</event>
        <event alias="e">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="f">CYCLE_ACTIVITY.STALLS_MEM_ANY</event>
        <event alias="g">RESOURCE_STALLS.SB</event>
        <event alias="h">CYCLE_ACTIVITY.STALLS_TOTAL</event>
        <event alias="j">UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC</event>
        <event alias="k">UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC</event>
        <event alias="m">UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC</event>
		<event alias="n">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
        <event alias="p">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="q">INST_RETIRED.ANY</event>
        <event alias="r">RS_EVENTS.EMPTY_CYCLES</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(1-((b-e+4*(c/threads)+a+e)/(4*d/threads)))*(f+g)/(h+j-(((q/p)&gt;1.8)?m:k)-(((n/d)&gt;0.1)?r:0)+g)</formula>
	</metric>
 
	<metric name="metric_TMAM_....L1_Bound(%)">
 		<event alias="a">CYCLE_ACTIVITY.STALLS_MEM_ANY</event>
        <event alias="b">CYCLE_ACTIVITY.STALLS_L1D_MISS</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*(a-b)/c</formula>
    </metric>

	<metric name="metric_TMAM_......DTLB_Load(%)">
        <event alias="a">DTLB_LOAD_MISSES.STLB_HIT</event>
        <event alias="b">DTLB_LOAD_MISSES.WALK_DURATION:c1</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*(7*a+b)/c</formula>
    </metric>

	<metric name="metric_TMAM_......Store_Fwd_Blk(%)">
		<event alias="a">LD_BLOCKS.STORE_FORWARD</event>
		<event alias="b">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*((13 * a) / b) </formula>				
	</metric>

	<metric name="metric_TMAM_......Lock_Latency(%)">
		<event alias="a">MEM_UOPS_RETIRED.LOCK_LOADS</event>
		<event alias="b">CPU_CLK_UNHALTED.THREAD</event>
		<event alias="c">MEM_UOPS_RETIRED.ALL_STORES</event>
		<event alias="d">OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO</event>
		<formula>100*(((a / c)* [1*b ,1*d].min)/ b) </formula>			
	</metric>

	<metric name="metric_TMAM_....L2_Bound(%)">
        <event alias="a">CYCLE_ACTIVITY.STALLS_L1D_MISS</event>
        <event alias="b">CYCLE_ACTIVITY.STALLS_L2_MISS</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*(a-b)/c</formula>
    </metric>

	<metric name="metric_TMAM_....L3_Bound(%)">
        <event alias="a">MEM_LOAD_UOPS_RETIRED.L3_HIT</event>
        <event alias="b">MEM_LOAD_UOPS_RETIRED.L3_MISS</event>
        <event alias="c">CYCLE_ACTIVITY.STALLS_L2_MISS</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*a/(a+7*b)*(c/d)</formula>
    </metric>
	
	<metric name="metric_TMAM_......Contested_Accesses(%)">
		<event alias="b">CPU_CLK_UNHALTED.THREAD</event>
		<event alias="g">MEM_LOAD_UOPS_RETIRED.L2_HIT</event>
		<event alias="h">MEM_LOAD_UOPS_RETIRED.L3_HIT</event>
		<event alias="j">MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HIT</event>
		<event alias="k">MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HITM</event>
		<event alias="m">MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_MISS</event>
		<event alias="n">MEM_LOAD_UOPS_L3_MISS_RETIRED.LOCAL_DRAM</event>
		<event alias="p">MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_DRAM</event>
		<event alias="q">MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_HITM</event>
		<event alias="r">MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_FWD</event>
		<event alias="s">MEM_LOAD_UOPS_RETIRED.HIT_LFB</event>
		<formula>100*(60*(k+m)*(1+s/(g+h+j+k+m+n+p+q+r))/b) </formula>			
	</metric>

	<metric name="metric_TMAM_......Data_Sharing(%)">
		<event alias="b">CPU_CLK_UNHALTED.THREAD</event>
		<event alias="g">MEM_LOAD_UOPS_RETIRED.L2_HIT</event>
		<event alias="h">MEM_LOAD_UOPS_RETIRED.L3_HIT</event>
		<event alias="j">MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HIT</event>
		<event alias="k">MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HITM</event>
		<event alias="m">MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_MISS</event>
		<event alias="n">MEM_LOAD_UOPS_L3_MISS_RETIRED.LOCAL_DRAM</event>
		<event alias="p">MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_DRAM</event>
		<event alias="q">MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_HITM</event>
		<event alias="r">MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_FWD</event>
		<event alias="s">MEM_LOAD_UOPS_RETIRED.HIT_LFB</event>
		<formula>100*(43*j*(1+s/(g+h+j+k+m+n+p+q+r))/b) </formula>			
	</metric>

	<metric name="metric_TMAM_......L3_Latency(%)">
		<event alias="b">CPU_CLK_UNHALTED.THREAD</event>
		<event alias="g">MEM_LOAD_UOPS_RETIRED.L2_HIT</event>
		<event alias="h">MEM_LOAD_UOPS_RETIRED.L3_HIT</event>
		<event alias="j">MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HIT</event>
		<event alias="k">MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_HITM</event>
		<event alias="m">MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_MISS</event>
		<event alias="n">MEM_LOAD_UOPS_L3_MISS_RETIRED.LOCAL_DRAM</event>
		<event alias="p">MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_DRAM</event>
		<event alias="q">MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_HITM</event>
		<event alias="r">MEM_LOAD_UOPS_L3_MISS_RETIRED.REMOTE_FWD</event>
		<event alias="s">MEM_LOAD_UOPS_RETIRED.HIT_LFB</event>
		<formula>100*41*h*(1+s/(g+h+j+k+m+n+p+q+r))/b</formula>
    </metric>

	<metric name="metric_TMAM_......SQ_Full(%)">
		<event alias="a">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<event alias="b">OFFCORE_REQUESTS_BUFFER.SQ_FULL</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(b/threads)/(a/threads)</formula>
	</metric>
	
	<metric name="metric_TMAM_....MEM_Bound(%)">
        <event alias="a">MEM_LOAD_UOPS_RETIRED.L3_HIT</event>
        <event alias="b">MEM_LOAD_UOPS_RETIRED.L3_MISS</event>
        <event alias="c">CYCLE_ACTIVITY.STALLS_L2_MISS</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*(1-(a/(a+7*b)))*(c/d)</formula>
    </metric>

	<metric name="metric_TMAM_......MEM_Bandwidth(%)">
        <event alias="a">OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD:c4</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*([1*a, 1*b].min)/b</formula>
    </metric>

	<metric name="metric_TMAM_......MEM_Latency(%)">
        <event alias="a">OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD:c4</event>
        <event alias="b">OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*(([1*b, 1*c].min)-([1*a, 1*c].min))/c</formula>
    </metric>

	<metric name="metric_TMAM_....Stores_Bound(%)">
        <event alias="a">RESOURCE_STALLS.SB</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*(a/b)</formula>
    </metric>

	<metric name="metric_TMAM_......DTLB_Store(%)">
        <event alias="a">DTLB_STORE_MISSES.STLB_HIT</event>
        <event alias="b">DTLB_STORE_MISSES.WALK_DURATION:c1</event>
        <event alias="c">CPU_CLK_UNHALTED.THREAD</event>
		<formula>100*(7*a+b)/c</formula>
    </metric>

	<metric name="metric_TMAM_..Core_Bound(%)">
		<event alias="a">IDQ_UOPS_NOT_DELIVERED.CORE</event>
		<event alias="b">UOPS_ISSUED.ANY</event>
		<event alias="c">INT_MISC.RECOVERY_CYCLES_ANY</event>
        <event alias="d">CPU_CLK_UNHALTED.THREAD_ANY</event>
        <event alias="e">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="f">CYCLE_ACTIVITY.STALLS_MEM_ANY</event>
        <event alias="g">RESOURCE_STALLS.SB</event>
        <event alias="h">CYCLE_ACTIVITY.STALLS_TOTAL</event>
        <event alias="j">UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC</event>
        <event alias="k">UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC</event>
        <event alias="m">UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC</event>
		<event alias="n">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
        <event alias="p">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="q">INST_RETIRED.ANY</event>
        <event alias="r">RS_EVENTS.EMPTY_CYCLES</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(1-((b-e+4*(c/threads)+a+e)/(4*d/threads)))*(1-((f+g)/(h+j-(((q/p)&gt;1.8)?m:k)-(((n/d)&gt;0.1)?r:0)+g)))</formula>
	</metric>

	<metric name="metric_TMAM_....Divider(%)">
        <event alias="a">ARITH.FPU_DIV_ACTIVE</event>
        <event alias="b">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(a/(b/threads))</formula>
    </metric>

	<metric name="metric_TMAM_....Ports_Utilization(%)">
        <event alias="d">CPU_CLK_UNHALTED.THREAD_ANY</event>
        <event alias="f">CYCLE_ACTIVITY.STALLS_MEM_ANY</event>
        <event alias="g">RESOURCE_STALLS.SB</event>
        <event alias="h">CYCLE_ACTIVITY.STALLS_TOTAL</event>
        <event alias="j">UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC</event>
        <event alias="k">UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC</event>
        <event alias="m">UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC</event>
		<event alias="n">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
        <event alias="p">CPU_CLK_UNHALTED.THREAD</event>
        <event alias="q">INST_RETIRED.ANY</event>
        <event alias="r">RS_EVENTS.EMPTY_CYCLES</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*((h+j-(((q/p)&gt;1.8)?m:k)-(((n/(d/threads))&gt;0.1)?r:0)+g)-g-f)/p</formula>
	</metric>

	<metric name="metric_TMAM_......0_Ports_Utilized(%)">
		<event alias="a">UOPS_EXECUTED.CORE:i1:c1</event>
		<event alias="b">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<event alias="c">IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE</event>
		<event alias="d">CYCLE_ACTIVITY.STALLS_TOTAL</event>
		<event alias="e">RS_EVENTS.EMPTY_CYCLES</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(((threads)&gt;1)?(a/threads):(d-(((c/(b/threads))&gt;0.1)?e:0)))/(b/threads)</formula>		
	</metric>

	<metric name="metric_TMAM_......1_Port_Utilized(%)">
		<event alias="a">UOPS_EXECUTED.CORE:c1</event>
		<event alias="b">UOPS_EXECUTED.CORE:c2</event>
		<event alias="c">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*((a-b)/threads)/(c/threads)</formula>			
	</metric>

	<metric name="metric_TMAM_......2_Ports_Utilized(%)">
		<event alias="a">UOPS_EXECUTED.CORE:c2</event>
		<event alias="b">UOPS_EXECUTED.CORE:c3</event>
		<event alias="c">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*((a-b)/threads)/(c/threads)</formula>			
	</metric>	

	<metric name="metric_TMAM_......3m_Ports_Utilized(%)">
		<event alias="b">UOPS_EXECUTED.CORE:c3</event>
		<event alias="c">CPU_CLK_UNHALTED.THREAD_ANY</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(b/threads)/(c/threads)</formula>			
	</metric>	

	<metric name="metric_TMAM_Retiring(%)">
 		<event alias="a">CPU_CLK_UNHALTED.THREAD_ANY</event>
        <event alias="b">UOPS_RETIRED.RETIRE_SLOTS</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(b/(4*(a/threads)))</formula>
    </metric>

	<metric name="metric_TMAM_..Base(%)">
 		<event alias="a">CPU_CLK_UNHALTED.THREAD_ANY</event>
        <event alias="b">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="c">IDQ.MS_UOPS</event>
        <event alias="d">UOPS_ISSUED.ANY</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*((b/(4*(a/threads)))-((b/d)*c/(4*(a/threads))))</formula>
    </metric>
	
	<metric name="metric_TMAM_....FP_Arith(%)">
 		<event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">INST_RETIRED.X87</event>
        <event alias="c">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="d">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="e">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="f">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="g">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="h">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="j">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(((b*c/a)+d+e+f+g+h+j)/c)</formula>
    </metric>

	<metric name="metric_TMAM_....Other(%)">
 		<event alias="a">INST_RETIRED.ANY</event>
        <event alias="b">INST_RETIRED.X87</event>
        <event alias="c">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="d">FP_ARITH_INST_RETIRED.SCALAR_SINGLE</event>
        <event alias="e">FP_ARITH_INST_RETIRED.SCALAR_DOUBLE</event>
        <event alias="f">FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE</event>
        <event alias="g">FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE</event>
        <event alias="h">FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE</event>
        <event alias="j">FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*(1-(((b*c/a)+d+e+f+g+h+j)/c))</formula>
    </metric>
	
	<metric name="metric_TMAM_..Microcode_Sequencer(%)">
 		<event alias="a">CPU_CLK_UNHALTED.THREAD_ANY</event>
        <event alias="b">UOPS_RETIRED.RETIRE_SLOTS</event>
        <event alias="c">IDQ.MS_UOPS</event>
        <event alias="d">UOPS_ISSUED.ANY</event>
		<constant alias="threads">system.sockets[0][0].size</constant>      
		<formula>100*((b/d)*c/(4*(a/threads)))</formula>
    </metric>
		
</root>
