#!/bin/bash
#
#
# Copyright (c) 2016 JustPlay (hy). All Rights Reserved
#
# Author:
#     hy
#
# Date:
#     2016/10/30
#
# Brief:
#     disable the same number *cores* on each socket.
#
# Globals:
#     CPU_CFG_DIR
#
# Arguments:
#
#     1, 2, 3, 4
#
# Returns:
#     succ: 0
#     fail: 1


# set -u          # 使用的变量必须提前定义过
# set -o nounset  # 使用的变量必须提前定义过

# set -e          # 所有非0的返回状态都需要捕获
# set -o errexit  # 所有非0的返回状态都需要捕获

# set -o pipefail # 管道间错误需要捕获

# set -x          #
# set -o xtrace   #

set -u


declare -r CPU_DEVICES="/sys/devices/system/cpu"

declare -r GREP="/bin/grep"
declare -r GAWK="/bin/gawk"
declare -r ECHO="/bin/echo"


function pr_msg()
{
    local msg="$*"
    echo "$msg"
}

function pr_nnl()
{
    local msg="$*"
    echo -n "$*"
}

function pr_err_with_time()
{
    local msg="$*"
    if [ -w /dev/stderr ]; then
        echo "[$(date +'%Y-%m-%d-%H:%M:%S')] $msg" >> /dev/stderr
    else
        echo "[$(date +'%Y-%m-%d-%H:%M:%S')] $msg"
    fi
}

function pr_err()
{
    local msg="$*"
    if [ -w /dev/stderr ]; then
        echo "$msg" >> /dev/stderr
    else
        echo "$msg"
    fi
}

function pr_warning()
{
    pr_err "Warning:"
    pr_err "    (1) this script is used to disable *CORES* not *THREADS*"
    pr_err "    (2) this script will disable the same numbers of cores on each socket"
    pr_err "    (3) *BE CAREFUL* with the [smt/core] argument"
}

function usage()
{
    pr_err "Usage:"
    pr_err "    $(basename $0) <cores to disable> <smt/core> [sockets (defaults to 2)]"
    pr_msg ""
    pr_warning
}

# unplug the *same* number of *core* on each socket
#
# $1 - # of cores to unplug
# $2 - # of smt per core
# $3 - # of sockets installed on this system
function processor_hotplug()
{
    local nr_smt_core=$2
    local nr_sys_skts=$3

    if [ $nr_sys_skts -le 0 ] || [ $nr_smt_core -le 0 ] || [ $(($1 % $nr_sys_skts)) -ne 0 ]; then
        pr_err "invalid argument: the first argument must be an multipler of sockets on this system"
        exit 1
    fi

    # thrds installed on this system
    local nr_sys_thrd=$(ls $CPU_DEVICES | $GREP 'cpu[0-9]\{1,\}' | wc -l)

    # cores installed on this system
    local nr_sys_core=$(($nr_sys_thrd / $nr_smt_core))

    # cores per socket
    local nr_core_socket=$(($nr_sys_core / $nr_sys_skts))

    # cores to unplug on each socket
    local nr_core_unplug=$(($1 / $nr_sys_skts))

    if [ $nr_core_unplug -ge $nr_core_socket ]; then
        pr_err "invalid argument: the specified core number are too big"
        exit 1
    fi

    # first, put all cores/thrds online
    for ((i = 0; i < $nr_sys_thrd; i++));
    do
        if [ -f $CPU_DEVICES/"cpu"$i/online ] && [ -w $CPU_DEVICES/"cpu"$i/online ]; then
            echo 1 > $CPU_DEVICES/"cpu"$i/online
        fi
    done

    pr_msg "system info: total $nr_sys_skts sockets, $nr_sys_core cores, $nr_sys_thrd threads"
    pr_msg "unplug info: will disable $1 cores, $nr_core_unplug cores/socket"
    pr_msg ""

    local nr_cpu_onln=$(cat /proc/cpuinfo | $GREP 'processor' | wc -l)
    if [ $nr_cpu_onln -ne $nr_sys_thrd ]; then
        pr_err "fatal error: can *not* put all core/thread online, exiting..."
        exit 1
    fi

    ## second, disable the same *cores* on each socket
    for ((c = 1; c <= $nr_core_unplug; c++)); 
    do
        for ((s = 1; s <= $nr_sys_skts; s++));
        do
            # the last online core on each socket
            local core_id=$(($nr_core_socket * $s - $c))
            
            # index0, L1 data cache
            # index1, L1 code cache
            # index2, L2 unified cache
            # index3, L3 unified cache
            local cpu_shared_list=$(cat ${CPU_DEVICES}/cpu${core_id}/cache/index0/shared_cpu_list | tr ',' ' ' )
            for p in $cpu_shared_list;
            do
                echo 0 > $CPU_DEVICES/"cpu"$p/"online"
            done
        done
    done

    ## finally, do some checks
    nr_cpu_onln=$(cat /proc/cpuinfo | $GREP 'processor' | wc -l)
    if [ $nr_cpu_onln -ne $(($nr_sys_thrd - $nr_core_unplug * $nr_sys_skts * $nr_smt_core)) ]; then
        pr_err "fatal error: unplug cores failed, exiting..."
        exit 1
    fi

    $GREP 'processor'   /proc/cpuinfo | $GAWK -F':' '{printf "%-3d", $2}' | tr -d '\n' | $GAWK '{printf("processor:   %s\n", $0)}' 
    $GREP 'core id'     /proc/cpuinfo | $GAWK -F':' '{printf "%-3d", $2}' | tr -d '\n' | $GAWK '{printf("core id:     %s\n", $0)}' 
    $GREP 'physical id' /proc/cpuinfo | $GAWK -F':' '{printf "%-3d", $2}' | tr -d '\n' | $GAWK '{printf("physical id: %s\n", $0)}' 
}


# entry: exec start from here
if [ $EUID -ne 0 ]; then
    pr_err "$(basename $0): you need root privilege to run"
    exit 1
fi

case $# in
3)
    cd $(dirname $0) && processor_hotplug $1 $2 $3
;;

2)
    cd $(dirname $0) && processor_hotplug $1 $2 2   # default to 2 sockets
;;

*)
    usage
    exit 1
esac

## Processors mapping on E5-2640-V4 without HT
#
#  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19
#  0  1  2  3  4  8  9 10 11 12  0  1  2  3  4  8  9 10 11 12
#  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1


## Processors mapping on E5-2640-V4 with HT
#
#  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
#  0  1  2  3  4  8  9 10 11 12  0  1  2  3  4  8  9 10 11 12  0  1  2  3  4  8  9 10 11 12  0  1  2  3  4  8  9 10 11 12
#  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0  0  0  1  1  1  1  1  1  1  1  1  1
#
