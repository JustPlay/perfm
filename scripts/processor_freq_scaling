#!/bin/bash

#
# Copyright (c) 2016 JustPlay (hy). All Rights Reserved
#
# Author:
#     hy
#
# Date:
#     2016/10/30
#
# Brief:
#     handle processor frequency scaling setting issue.
#
# Globals:
#     
#
# Arguments:
#
#     1, 2
#
# Returns:
#     succ: 0
#     fail: 1


# set -u          # 使用的变量必须提前定义过
# set -o nounset  # 使用的变量必须提前定义过

# set -e          # 所有非0的返回状态都需要捕获
# set -o errexit  # 所有非0的返回状态都需要捕获

# set -o pipefail # 管道间错误需要捕获

# set -x          #
# set -o xtrace   #

set -u


declare -r CPU_DEVICES="/sys/devices/system/cpu"

declare -r CAT="/bin/cat"

declare -r GREP="/bin/grep"
declare -r GAWK="/bin/gawk"
declare -r ECHO="/bin/echo"

declare -r CPU0_FREQ_MAX=$($CAT $CPU_DEVICES/cpu0/cpufreq/scaling_available_frequencies | $GAWK -F' ' '{ print $1 }');
declare -r CPU0_FREQ_MIN=$($CAT $CPU_DEVICES/cpu0/cpufreq/scaling_available_frequencies | $GAWK -F' ' '{ print $NF }');


function pr_msg()
{
    local msg="$*"
    echo "$msg"
}

function pr_nnl()
{
    local msg="$*"
    echo -n "$msg"
}

function pr_err()
{
    local msg="$*"
    if [ -w /dev/stderr ]; then
        echo "$msg" >> /dev/stderr
    else
        echo "$msg"
    fi
}

function usage()
{
    pr_err "$(basename $0) <min-freq> <max-freq>"
    pr_err "$(basename $0) <max-freq>"
    pr_err "$(basename $0)"
}

function frequency_info()
{
    $CAT /proc/cpuinfo | $GREP -E '(MHz|processor)' | while read line;
    do
        local processor=$(echo $line | $GREP 'processor')
        if [ -n "$processor" ]; then
            echo $processor | tr -d ' ' | $GAWK -F':' '{printf("- %s: #%-8d", $1, $2)}'
        fi 

        local frequency=$(echo $line | $GREP 'cpu MHz')
        if [ -n "$frequency" ]; then
            echo $frequency | $GAWK -F':' '{printf("%.0fMHz\n", $2)}'
        fi
    done

}

function processor_freq_scaling()
{
    local cpu_min_freq=$(echo "$1 * 1000000" | bc | $GAWK -F'.' '{print $1}')
    local cpu_max_freq=$(echo "$2 * 1000000" | bc | $GAWK -F'.' '{print $1}')

    if [ ${cpu_min_freq} -gt ${cpu_max_freq} ]; then
        pr_err "invalid argrments: please ensure ..."
        exit 1;
    fi


    # set cpu frequency scaling
    local cpu_list=$(ls $CPU_DEVICES | $GREP 'cpu[0-9]\{1,\}')

    for cpu in ${cpu_list} 
    do
        local if_onln=0
        if [ -f ${CPU_DEVICES}/${cpu}/online ] && [ -r ${CPU_DEVICES}/${cpu}/online ]; then
            if_onln=$($CAT ${CPU_DEVICES}/${cpu}/online)
        fi
       
        if [ "$if_onln"X = "1"X ] || [ "${cpu}" = "cpu0" ]; then
            echo ${cpu_min_freq} > ${CPU_DEVICES}/$cpu/cpufreq/scaling_min_freq
            echo ${cpu_max_freq} > ${CPU_DEVICES}/$cpu/cpufreq/scaling_max_freq
        fi
    done

    # finally, do some checks
    local cpu_freq_list=$($CAT /proc/cpuinfo | $GREP -i 'mhz' | $GAWK -F':' '{print $2}' | tr -d ' ')
    for freq in ${cpu_freq_list}
    do
        local cpu_cur_freq=$(echo "scale=2; $freq * 1000" | bc | $GAWK -F'.' '{printf $1}')
        if [ $cpu_cur_freq -lt $cpu_min_freq ] || [ $cpu_cur_freq -gt $cpu_max_freq ]; then
            pr_err "fatal error: set cpu freq failed, exiting..."
            exit 1
        fi
    done

    frequency_info
}


# entry: exec start from here
if [ $EUID -ne 0 ] && [ $# -ne 0 ]; then
    pr_err "$(basename $0): you need root privilege to do cpu freq scaling."
    pr_err ""

    usage

    exit 1
fi

case $# in
2)
    cd $(dirname $0) && processor_freq_scaling $1 $2
;;

1)
    cd $(dirname $0) && processor_freq_scaling $1 $1
;;

0)
    cd $(dirname $0) && frequency_info
;;

*)
    usage
    exit 1
esac

